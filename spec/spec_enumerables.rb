# This file was generated by the `rspec --init` command. Conventionally, all
require_relative '../enumerable'

describe Enumerable do
  arr1 = [1, 2, 5, 7, 9]
  arr2 = ['hi', 'hello', 'bybye', true, false]
  arr3 = %w[Sharon Leo Leila Brian Arun]
  arr4 = %w[ant bear cat]
  map_arr = ['small Pizza', 'small garlic bread', 'small milkshake']
  test_proc = proc { |i| i * i }
  negativetest = ['ih', 'llehe', 'www', false, true]

  describe '#my_each' do
    it 'in this it should return an array ' do
      expect(arr1.my_each { |x| }).to eql([1, 2, 5, 7, 9])
    end
    it 'this one should print another array' do
      expect(arr2.my_each { |y| }).to eql(['hi', 'hello', 'bybye', true, false])
    end
    it 'this one should print the negative scenarios' do
      expect(negativetest.my_each { |y| }).not_to eql(['pp', 'ww', 'mm', true, false])
    end
  end

  describe '#my_each_with_index' do
    it ' this test case return an array' do
      expect(arr1.my_each_with_index { |x| }).to eql(arr1)
    end
    it ' this test case is the negative scenario' do
      expect(arr1.my_each_with_index { |x| }).not_to eql(arr3)
    end
    
  end

  describe '#my_select' do
    it 'retunr only the selected items' do
      expect(arr3.my_select { |x| x != 'Brian' }).to eql(%w[Sharon Leo Leila Arun])
    end

    it 'test to check if the return is wrong as Sharon shouldnt be returned' do
      expect(arr3.my_select { |y| y != 'Sharon' }).not_to eql(%w[Sharon Leo Leila Arun])
    end
  end

  describe '#my_all?' do
    it 'It should return true as all the elemnts inside comply with the condition' do
      expect(arr4.my_all? { |x| x.length >= 2 }).to be true
    end

    it 'It should return false as not all the elemnts inside comply with the condition' do
      expect(arr4.my_all? { |x| x.length >= 4 }).to be false
    end

    it 'It should return false as all the elemnts inside are not of the type String' do
      expect([1, 2i, 3.14].my_all?(String)).to be false
    end
  end

  describe '#my_any?' do
    it 'It should return true as one of the elemnts inside comply with the condition' do
      expect(arr4.my_any? { |x| x.length >= 3 }).to be true
    end

    it 'It should return false as any elemnts inside has a true value  tocomply with the condition' do
      expect(arr4.my_any? { |x| x.length >= 7 }).to be false
    end

    it 'It should return false as an empty array does not compute to any true value' do
      expect([].my_any?).not_to be true
    end
  end

  describe '#my_none?' do
    it 'It should return true as none of the elemnts inside comply with the condition' do
      expect(arr4.my_none? { |x| x.length >= 5 }).to be true
    end

    it 'It should return false as one of  elemnts inside has a true value  to comply with the condition' do
      expect(arr4.my_none? { |x| x.length >= 4 }).to be false
    end

    it 'It should return true as none  of the element are integer' do
      expect(arr4.my_none?(Integer)).to be true
    end
    it 'It should return true as none  of the element are integer' do
      expect([nil, false, true].my_none?).to be false
    end
  end

  describe '#my_count' do
    it 'It should return the number of element ' do
      expect(arr2.my_count).to eql(5)
    end

    it ' It should return count if it is even element' do
      expect(arr1.my_count { |x| (x % 2).zero? }).to eql(1)
    end

    it ' It should return 1 as there is one Leo in the list' do
      expect(arr3.my_count('Leo')).to eql(1)
    end
  end

  describe '#my_map' do
    it 'It should return the map_array with modified size to large ' do
      expect(map_arr.my_map do |x|
               x.gsub('small', 'large')
             end).to eql(['large Pizza', 'large garlic bread', 'large milkshake'])
    end

    it ' It should return the modified array with numbers multiply i*i' do
      expect(arr1.my_map(test_proc) { |i| i }).to eql([1, 4, 25, 49, 81])
    end

    it ' It should return the modified array with numnbers sum +10' do
      expect(arr1.my_map { |x| x + 10 }).to eql([11, 12, 15, 17, 19])
    end
  end

  describe '#my_inject' do
    it 'It should return the total sum of of i[n] + i[n+1] of the array' do
      expect(arr1.my_inject { |x, y| x * y }).to eql(630)
    end

    it 'It should return the longest string in the array' do
      expect(arr4.my_inject { |memo, word| memo.length > word.length ? memo : word }).to eql('bear')
    end

    it 'It should return 1 as 1 to the power of anything is equal to 1' do
      expect(arr1.my_inject { |z, w| z**w }).to eql(1)
    end
  end

  describe '#multiply_els' do
    it 'It should return the total multiplication of i[n] * i[n+1] of the array' do
      expect(multiply_els([1, 2, 4])).to eql(8)
    end

    it 'It should return the total multiplication of i[n] * i[n+1] of the array' do
      expect(multiply_els([3, 5, 8])).to eql([3, 5, 8].inject { |a, b| a * b })
    end
  end
end
